//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace EmmyLua.Configuration
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Setting of EmmyLua
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Setting
    {
        [Newtonsoft.Json.JsonProperty("addonManager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddonManager AddonManager { get; set; }

        [Newtonsoft.Json.JsonProperty("addonManager.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddonManagerEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("codeLens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeLens CodeLens { get; set; }

        [Newtonsoft.Json.JsonProperty("codeLens.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CodeLensEnable { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("completion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Completion Completion { get; set; }

        [Newtonsoft.Json.JsonProperty("completion.autoRequire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletionAutoRequire { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("completion.callSnippet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingCompletionCallSnippet? CompletionCallSnippet { get; set; } = EmmyLua.Configuration.SettingCompletionCallSnippet.Disable;

        [Newtonsoft.Json.JsonProperty("completion.displayContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompletionDisplayContext { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("completion.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletionEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("completion.keywordSnippet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingCompletionKeywordSnippet? CompletionKeywordSnippet { get; set; } = EmmyLua.Configuration.SettingCompletionKeywordSnippet.Replace;

        [Newtonsoft.Json.JsonProperty("completion.postfix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompletionPostfix { get; set; } = "@";

        [Newtonsoft.Json.JsonProperty("completion.requireSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompletionRequireSeparator { get; set; } = ".";

        [Newtonsoft.Json.JsonProperty("completion.showParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletionShowParams { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("completion.showWord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingCompletionShowWord? CompletionShowWord { get; set; } = EmmyLua.Configuration.SettingCompletionShowWord.Fallback;

        [Newtonsoft.Json.JsonProperty("completion.workspaceWord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletionWorkspaceWord { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("diagnostics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Diagnostics Diagnostics { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.disable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Disable> DiagnosticsDisable { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.disableScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DiagnosticsDisableScheme { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DiagnosticsEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("diagnostics.globals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DiagnosticsGlobals { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.groupFileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsGroupFileStatus DiagnosticsGroupFileStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.groupSeverity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsGroupSeverity DiagnosticsGroupSeverity { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.ignoredFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingDiagnosticsIgnoredFiles? DiagnosticsIgnoredFiles { get; set; } = EmmyLua.Configuration.SettingDiagnosticsIgnoredFiles.Opened;

        [Newtonsoft.Json.JsonProperty("diagnostics.libraryFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingDiagnosticsLibraryFiles? DiagnosticsLibraryFiles { get; set; } = EmmyLua.Configuration.SettingDiagnosticsLibraryFiles.Opened;

        [Newtonsoft.Json.JsonProperty("diagnostics.neededFileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsNeededFileStatus DiagnosticsNeededFileStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsSeverity DiagnosticsSeverity { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.unusedLocalExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DiagnosticsUnusedLocalExclude { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics.workspaceDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiagnosticsWorkspaceDelay { get; set; } = 3000;

        [Newtonsoft.Json.JsonProperty("diagnostics.workspaceEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingDiagnosticsWorkspaceEvent? DiagnosticsWorkspaceEvent { get; set; } = EmmyLua.Configuration.SettingDiagnosticsWorkspaceEvent.OnSave;

        [Newtonsoft.Json.JsonProperty("diagnostics.workspaceRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiagnosticsWorkspaceRate { get; set; } = 100;

        [Newtonsoft.Json.JsonProperty("doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Doc Doc { get; set; }

        [Newtonsoft.Json.JsonProperty("doc.packageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DocPackageName { get; set; }

        [Newtonsoft.Json.JsonProperty("doc.privateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DocPrivateName { get; set; }

        [Newtonsoft.Json.JsonProperty("doc.protectedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DocProtectedName { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Format Format { get; set; }

        [Newtonsoft.Json.JsonProperty("format.defaultConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> FormatDefaultConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("format.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FormatEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hint Hint { get; set; }

        [Newtonsoft.Json.JsonProperty("hint.arrayIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingHintArrayIndex? HintArrayIndex { get; set; } = EmmyLua.Configuration.SettingHintArrayIndex.Auto;

        [Newtonsoft.Json.JsonProperty("hint.await", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HintAwait { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hint.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HintEnable { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("hint.paramName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingHintParamName? HintParamName { get; set; } = EmmyLua.Configuration.SettingHintParamName.All;

        [Newtonsoft.Json.JsonProperty("hint.paramType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HintParamType { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hint.semicolon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingHintSemicolon? HintSemicolon { get; set; } = EmmyLua.Configuration.SettingHintSemicolon.SameLine;

        [Newtonsoft.Json.JsonProperty("hint.setType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HintSetType { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("hover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hover Hover { get; set; }

        [Newtonsoft.Json.JsonProperty("hover.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HoverEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hover.enumsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HoverEnumsLimit { get; set; } = 5;

        [Newtonsoft.Json.JsonProperty("hover.expandAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HoverExpandAlias { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hover.previewFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HoverPreviewFields { get; set; } = 50;

        [Newtonsoft.Json.JsonProperty("hover.viewNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HoverViewNumber { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hover.viewString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HoverViewString { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("hover.viewStringMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HoverViewStringMax { get; set; } = 1000;

        [Newtonsoft.Json.JsonProperty("misc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Misc Misc { get; set; }

        [Newtonsoft.Json.JsonProperty("misc.executablePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiscExecutablePath { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("misc.parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MiscParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("nameStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameStyle NameStyle { get; set; }

        [Newtonsoft.Json.JsonProperty("nameStyle.config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> NameStyleConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Runtime Runtime { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime.builtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RuntimeBuiltin RuntimeBuiltin { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime.fileEncoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingRuntimeFileEncoding? RuntimeFileEncoding { get; set; } = EmmyLua.Configuration.SettingRuntimeFileEncoding.Utf8;

        [Newtonsoft.Json.JsonProperty("runtime.meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeMeta { get; set; } = "${version} ${language} ${encoding}";

        [Newtonsoft.Json.JsonProperty("runtime.nonstandardSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NonstandardSymbol> RuntimeNonstandardSymbol { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime.path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RuntimePath { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime.pathStrict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RuntimePathStrict { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("runtime.plugin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimePlugin { get; set; } = "";

        [Newtonsoft.Json.JsonProperty("runtime.pluginArgs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RuntimePluginArgs { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime.special", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous?> RuntimeSpecial { get; set; }

        [Newtonsoft.Json.JsonProperty("runtime.unicodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RuntimeUnicodeName { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("runtime.version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingRuntimeVersion? RuntimeVersion { get; set; } = EmmyLua.Configuration.SettingRuntimeVersion.Lua_5_4;

        [Newtonsoft.Json.JsonProperty("semantic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Semantic Semantic { get; set; }

        [Newtonsoft.Json.JsonProperty("semantic.annotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SemanticAnnotation { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("semantic.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SemanticEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("semantic.keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SemanticKeyword { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("semantic.variable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SemanticVariable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("signatureHelp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignatureHelp SignatureHelp { get; set; }

        [Newtonsoft.Json.JsonProperty("signatureHelp.enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SignatureHelpEnable { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("spell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Spell Spell { get; set; }

        [Newtonsoft.Json.JsonProperty("spell.dict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpellDict { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("type.castNumberToInteger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TypeCastNumberToInteger { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("type.weakNilCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TypeWeakNilCheck { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("type.weakUnionCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TypeWeakUnionCheck { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("typeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFormat TypeFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("typeFormat.config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFormatConfig TypeFormatConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("window", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Window Window { get; set; }

        [Newtonsoft.Json.JsonProperty("window.progressBar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WindowProgressBar { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("window.statusBar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WindowStatusBar { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("workspace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Workspace Workspace { get; set; }

        [Newtonsoft.Json.JsonProperty("workspace.checkThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkspaceCheckThirdParty { get; set; }

        [Newtonsoft.Json.JsonProperty("workspace.ignoreDir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkspaceIgnoreDir { get; set; }

        [Newtonsoft.Json.JsonProperty("workspace.ignoreSubmodules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkspaceIgnoreSubmodules { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("workspace.library", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkspaceLibrary { get; set; }

        [Newtonsoft.Json.JsonProperty("workspace.maxPreload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkspaceMaxPreload { get; set; } = 5000;

        [Newtonsoft.Json.JsonProperty("workspace.preloadFileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkspacePreloadFileSize { get; set; } = 500;

        [Newtonsoft.Json.JsonProperty("workspace.useGitIgnore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkspaceUseGitIgnore { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("workspace.userThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkspaceUserThirdParty { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AddonManager
    {
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CodeLens
    {
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Completion
    {
        [Newtonsoft.Json.JsonProperty("autoRequire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoRequire { get; set; }

        [Newtonsoft.Json.JsonProperty("callSnippet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingCompletionCallSnippet? CallSnippet { get; set; }

        [Newtonsoft.Json.JsonProperty("displayContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayContext { get; set; }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        [Newtonsoft.Json.JsonProperty("keywordSnippet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingCompletionKeywordSnippet? KeywordSnippet { get; set; }

        [Newtonsoft.Json.JsonProperty("postfix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postfix { get; set; }

        [Newtonsoft.Json.JsonProperty("requireSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequireSeparator { get; set; }

        [Newtonsoft.Json.JsonProperty("showParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowParams { get; set; }

        [Newtonsoft.Json.JsonProperty("showWord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingCompletionShowWord? ShowWord { get; set; }

        [Newtonsoft.Json.JsonProperty("workspaceWord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkspaceWord { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingCompletionCallSnippet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Both")]
        Both = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Replace")]
        Replace = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingCompletionKeywordSnippet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Both")]
        Both = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Replace")]
        Replace = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingCompletionShowWord
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enable")]
        Enable = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Diagnostics
    {
        [Newtonsoft.Json.JsonProperty("disable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Disable2 Disable { get; set; }

        [Newtonsoft.Json.JsonProperty("disableScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisableScheme DisableScheme { get; set; }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        [Newtonsoft.Json.JsonProperty("globals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Globals Globals { get; set; }

        [Newtonsoft.Json.JsonProperty("groupFileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsGroupFileStatus GroupFileStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("groupSeverity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsGroupSeverity GroupSeverity { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoredFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingDiagnosticsIgnoredFiles? IgnoredFiles { get; set; }

        [Newtonsoft.Json.JsonProperty("libraryFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingDiagnosticsLibraryFiles? LibraryFiles { get; set; }

        [Newtonsoft.Json.JsonProperty("neededFileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsNeededFileStatus NeededFileStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticsSeverity Severity { get; set; }

        [Newtonsoft.Json.JsonProperty("unusedLocalExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnusedLocalExclude UnusedLocalExclude { get; set; }

        [Newtonsoft.Json.JsonProperty("workspaceDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkspaceDelay { get; set; }

        [Newtonsoft.Json.JsonProperty("workspaceEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingDiagnosticsWorkspaceEvent? WorkspaceEvent { get; set; }

        [Newtonsoft.Json.JsonProperty("workspaceRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkspaceRate { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Disable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"action-after-return")]
        ActionAfterReturn = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"ambiguity-1")]
        Ambiguity1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"ambiguous-syntax")]
        AmbiguousSyntax = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"args-after-dots")]
        ArgsAfterDots = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"assign-type-mismatch")]
        AssignTypeMismatch = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"await-in-sync")]
        AwaitInSync = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"block-after-else")]
        BlockAfterElse = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"break-outside")]
        BreakOutside = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"cast-local-type")]
        CastLocalType = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"cast-type-mismatch")]
        CastTypeMismatch = 9,


        [System.Runtime.Serialization.EnumMember(Value = @"circle-doc-class")]
        CircleDocClass = 10,


        [System.Runtime.Serialization.EnumMember(Value = @"close-non-object")]
        CloseNonObject = 11,


        [System.Runtime.Serialization.EnumMember(Value = @"code-after-break")]
        CodeAfterBreak = 12,


        [System.Runtime.Serialization.EnumMember(Value = @"codestyle-check")]
        CodestyleCheck = 13,


        [System.Runtime.Serialization.EnumMember(Value = @"count-down-loop")]
        CountDownLoop = 14,


        [System.Runtime.Serialization.EnumMember(Value = @"deprecated")]
        Deprecated = 15,


        [System.Runtime.Serialization.EnumMember(Value = @"different-requires")]
        DifferentRequires = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"discard-returns")]
        DiscardReturns = 17,


        [System.Runtime.Serialization.EnumMember(Value = @"doc-field-no-class")]
        DocFieldNoClass = 18,


        [System.Runtime.Serialization.EnumMember(Value = @"duplicate-doc-alias")]
        DuplicateDocAlias = 19,


        [System.Runtime.Serialization.EnumMember(Value = @"duplicate-doc-field")]
        DuplicateDocField = 20,


        [System.Runtime.Serialization.EnumMember(Value = @"duplicate-doc-param")]
        DuplicateDocParam = 21,


        [System.Runtime.Serialization.EnumMember(Value = @"duplicate-index")]
        DuplicateIndex = 22,


        [System.Runtime.Serialization.EnumMember(Value = @"duplicate-set-field")]
        DuplicateSetField = 23,


        [System.Runtime.Serialization.EnumMember(Value = @"empty-block")]
        EmptyBlock = 24,


        [System.Runtime.Serialization.EnumMember(Value = @"err-assign-as-eq")]
        ErrAssignAsEq = 25,


        [System.Runtime.Serialization.EnumMember(Value = @"err-c-long-comment")]
        ErrCLongComment = 26,


        [System.Runtime.Serialization.EnumMember(Value = @"err-comment-prefix")]
        ErrCommentPrefix = 27,


        [System.Runtime.Serialization.EnumMember(Value = @"err-do-as-then")]
        ErrDoAsThen = 28,


        [System.Runtime.Serialization.EnumMember(Value = @"err-eq-as-assign")]
        ErrEqAsAssign = 29,


        [System.Runtime.Serialization.EnumMember(Value = @"err-esc")]
        ErrEsc = 30,


        [System.Runtime.Serialization.EnumMember(Value = @"err-nonstandard-symbol")]
        ErrNonstandardSymbol = 31,


        [System.Runtime.Serialization.EnumMember(Value = @"err-then-as-do")]
        ErrThenAsDo = 32,


        [System.Runtime.Serialization.EnumMember(Value = @"exp-in-action")]
        ExpInAction = 33,


        [System.Runtime.Serialization.EnumMember(Value = @"global-element")]
        GlobalElement = 34,


        [System.Runtime.Serialization.EnumMember(Value = @"global-in-nil-env")]
        GlobalInNilEnv = 35,


        [System.Runtime.Serialization.EnumMember(Value = @"incomplete-signature-doc")]
        IncompleteSignatureDoc = 36,


        [System.Runtime.Serialization.EnumMember(Value = @"index-in-func-name")]
        IndexInFuncName = 37,


        [System.Runtime.Serialization.EnumMember(Value = @"inject-field")]
        InjectField = 38,


        [System.Runtime.Serialization.EnumMember(Value = @"invisible")]
        Invisible = 39,


        [System.Runtime.Serialization.EnumMember(Value = @"jump-local-scope")]
        JumpLocalScope = 40,


        [System.Runtime.Serialization.EnumMember(Value = @"keyword")]
        Keyword = 41,


        [System.Runtime.Serialization.EnumMember(Value = @"local-limit")]
        LocalLimit = 42,


        [System.Runtime.Serialization.EnumMember(Value = @"lowercase-global")]
        LowercaseGlobal = 43,


        [System.Runtime.Serialization.EnumMember(Value = @"lua-doc-miss-sign")]
        LuaDocMissSign = 44,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-error-diag-mode")]
        LuadocErrorDiagMode = 45,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-alias-extends")]
        LuadocMissAliasExtends = 46,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-alias-name")]
        LuadocMissAliasName = 47,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-arg-name")]
        LuadocMissArgName = 48,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-cate-name")]
        LuadocMissCateName = 49,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-class-extends-name")]
        LuadocMissClassExtendsName = 50,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-class-name")]
        LuadocMissClassName = 51,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-diag-mode")]
        LuadocMissDiagMode = 52,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-diag-name")]
        LuadocMissDiagName = 53,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-field-extends")]
        LuadocMissFieldExtends = 54,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-field-name")]
        LuadocMissFieldName = 55,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-fun-after-overload")]
        LuadocMissFunAfterOverload = 56,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-generic-name")]
        LuadocMissGenericName = 57,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-local-name")]
        LuadocMissLocalName = 58,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-module-name")]
        LuadocMissModuleName = 59,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-operator-name")]
        LuadocMissOperatorName = 60,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-param-extends")]
        LuadocMissParamExtends = 61,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-param-name")]
        LuadocMissParamName = 62,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-see-name")]
        LuadocMissSeeName = 63,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-sign-name")]
        LuadocMissSignName = 64,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-symbol")]
        LuadocMissSymbol = 65,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-type-name")]
        LuadocMissTypeName = 66,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-vararg-type")]
        LuadocMissVarargType = 67,


        [System.Runtime.Serialization.EnumMember(Value = @"luadoc-miss-version")]
        LuadocMissVersion = 68,


        [System.Runtime.Serialization.EnumMember(Value = @"malformed-number")]
        MalformedNumber = 69,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-end")]
        MissEnd = 70,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-esc-x")]
        MissEscX = 71,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-exp")]
        MissExp = 72,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-exponent")]
        MissExponent = 73,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-field")]
        MissField = 74,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-loop-max")]
        MissLoopMax = 75,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-loop-min")]
        MissLoopMin = 76,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-method")]
        MissMethod = 77,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-name")]
        MissName = 78,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-sep-in-table")]
        MissSepInTable = 79,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-space-between")]
        MissSpaceBetween = 80,


        [System.Runtime.Serialization.EnumMember(Value = @"miss-symbol")]
        MissSymbol = 81,


        [System.Runtime.Serialization.EnumMember(Value = @"missing-fields")]
        MissingFields = 82,


        [System.Runtime.Serialization.EnumMember(Value = @"missing-global-doc")]
        MissingGlobalDoc = 83,


        [System.Runtime.Serialization.EnumMember(Value = @"missing-local-export-doc")]
        MissingLocalExportDoc = 84,


        [System.Runtime.Serialization.EnumMember(Value = @"missing-parameter")]
        MissingParameter = 85,


        [System.Runtime.Serialization.EnumMember(Value = @"missing-return")]
        MissingReturn = 86,


        [System.Runtime.Serialization.EnumMember(Value = @"missing-return-value")]
        MissingReturnValue = 87,


        [System.Runtime.Serialization.EnumMember(Value = @"name-style-check")]
        NameStyleCheck = 88,


        [System.Runtime.Serialization.EnumMember(Value = @"need-check-nil")]
        NeedCheckNil = 89,


        [System.Runtime.Serialization.EnumMember(Value = @"need-paren")]
        NeedParen = 90,


        [System.Runtime.Serialization.EnumMember(Value = @"nesting-long-mark")]
        NestingLongMark = 91,


        [System.Runtime.Serialization.EnumMember(Value = @"newfield-call")]
        NewfieldCall = 92,


        [System.Runtime.Serialization.EnumMember(Value = @"newline-call")]
        NewlineCall = 93,


        [System.Runtime.Serialization.EnumMember(Value = @"no-unknown")]
        NoUnknown = 94,


        [System.Runtime.Serialization.EnumMember(Value = @"no-visible-label")]
        NoVisibleLabel = 95,


        [System.Runtime.Serialization.EnumMember(Value = @"not-yieldable")]
        NotYieldable = 96,


        [System.Runtime.Serialization.EnumMember(Value = @"param-type-mismatch")]
        ParamTypeMismatch = 97,


        [System.Runtime.Serialization.EnumMember(Value = @"redefined-label")]
        RedefinedLabel = 98,


        [System.Runtime.Serialization.EnumMember(Value = @"redefined-local")]
        RedefinedLocal = 99,


        [System.Runtime.Serialization.EnumMember(Value = @"redundant-parameter")]
        RedundantParameter = 100,


        [System.Runtime.Serialization.EnumMember(Value = @"redundant-return")]
        RedundantReturn = 101,


        [System.Runtime.Serialization.EnumMember(Value = @"redundant-return-value")]
        RedundantReturnValue = 102,


        [System.Runtime.Serialization.EnumMember(Value = @"redundant-value")]
        RedundantValue = 103,


        [System.Runtime.Serialization.EnumMember(Value = @"return-type-mismatch")]
        ReturnTypeMismatch = 104,


        [System.Runtime.Serialization.EnumMember(Value = @"set-const")]
        SetConst = 105,


        [System.Runtime.Serialization.EnumMember(Value = @"spell-check")]
        SpellCheck = 106,


        [System.Runtime.Serialization.EnumMember(Value = @"trailing-space")]
        TrailingSpace = 107,


        [System.Runtime.Serialization.EnumMember(Value = @"unbalanced-assignments")]
        UnbalancedAssignments = 108,


        [System.Runtime.Serialization.EnumMember(Value = @"undefined-doc-class")]
        UndefinedDocClass = 109,


        [System.Runtime.Serialization.EnumMember(Value = @"undefined-doc-name")]
        UndefinedDocName = 110,


        [System.Runtime.Serialization.EnumMember(Value = @"undefined-doc-param")]
        UndefinedDocParam = 111,


        [System.Runtime.Serialization.EnumMember(Value = @"undefined-env-child")]
        UndefinedEnvChild = 112,


        [System.Runtime.Serialization.EnumMember(Value = @"undefined-field")]
        UndefinedField = 113,


        [System.Runtime.Serialization.EnumMember(Value = @"undefined-global")]
        UndefinedGlobal = 114,


        [System.Runtime.Serialization.EnumMember(Value = @"unexpect-dots")]
        UnexpectDots = 115,


        [System.Runtime.Serialization.EnumMember(Value = @"unexpect-efunc-name")]
        UnexpectEfuncName = 116,


        [System.Runtime.Serialization.EnumMember(Value = @"unexpect-lfunc-name")]
        UnexpectLfuncName = 117,


        [System.Runtime.Serialization.EnumMember(Value = @"unexpect-symbol")]
        UnexpectSymbol = 118,


        [System.Runtime.Serialization.EnumMember(Value = @"unicode-name")]
        UnicodeName = 119,


        [System.Runtime.Serialization.EnumMember(Value = @"unknown-attribute")]
        UnknownAttribute = 120,


        [System.Runtime.Serialization.EnumMember(Value = @"unknown-cast-variable")]
        UnknownCastVariable = 121,


        [System.Runtime.Serialization.EnumMember(Value = @"unknown-diag-code")]
        UnknownDiagCode = 122,


        [System.Runtime.Serialization.EnumMember(Value = @"unknown-operator")]
        UnknownOperator = 123,


        [System.Runtime.Serialization.EnumMember(Value = @"unknown-symbol")]
        UnknownSymbol = 124,


        [System.Runtime.Serialization.EnumMember(Value = @"unreachable-code")]
        UnreachableCode = 125,


        [System.Runtime.Serialization.EnumMember(Value = @"unsupport-symbol")]
        UnsupportSymbol = 126,


        [System.Runtime.Serialization.EnumMember(Value = @"unused-function")]
        UnusedFunction = 127,


        [System.Runtime.Serialization.EnumMember(Value = @"unused-label")]
        UnusedLabel = 128,


        [System.Runtime.Serialization.EnumMember(Value = @"unused-local")]
        UnusedLocal = 129,


        [System.Runtime.Serialization.EnumMember(Value = @"unused-vararg")]
        UnusedVararg = 130,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DiagnosticsGroupFileStatus
    {
        /// <summary>
        /// * ambiguity-1
        /// <br/>* count-down-loop
        /// <br/>* different-requires
        /// <br/>* newfield-call
        /// <br/>* newline-call
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ambiguity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusAmbiguity? Ambiguity { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusAmbiguity.Fallback;

        /// <summary>
        /// * await-in-sync
        /// <br/>* not-yieldable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("await", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusAwait? Await { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusAwait.Fallback;

        /// <summary>
        /// * codestyle-check
        /// <br/>* name-style-check
        /// <br/>* spell-check
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codestyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusCodestyle? Codestyle { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusCodestyle.Fallback;

        /// <summary>
        /// * global-element
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conventions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusConventions? Conventions { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusConventions.Fallback;

        /// <summary>
        /// * duplicate-index
        /// <br/>* duplicate-set-field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusDuplicate? Duplicate { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusDuplicate.Fallback;

        /// <summary>
        /// * global-in-nil-env
        /// <br/>* lowercase-global
        /// <br/>* undefined-env-child
        /// <br/>* undefined-global
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusGlobal? Global { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusGlobal.Fallback;

        /// <summary>
        /// * circle-doc-class
        /// <br/>* doc-field-no-class
        /// <br/>* duplicate-doc-alias
        /// <br/>* duplicate-doc-field
        /// <br/>* duplicate-doc-param
        /// <br/>* incomplete-signature-doc
        /// <br/>* missing-global-doc
        /// <br/>* missing-local-export-doc
        /// <br/>* undefined-doc-class
        /// <br/>* undefined-doc-name
        /// <br/>* undefined-doc-param
        /// <br/>* unknown-cast-variable
        /// <br/>* unknown-diag-code
        /// <br/>* unknown-operator
        /// </summary>
        [Newtonsoft.Json.JsonProperty("luadoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusLuadoc? Luadoc { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusLuadoc.Fallback;

        /// <summary>
        /// * redefined-local
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redefined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusRedefined? Redefined { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusRedefined.Fallback;

        /// <summary>
        /// * close-non-object
        /// <br/>* deprecated
        /// <br/>* discard-returns
        /// <br/>* invisible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusStrict? Strict { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusStrict.Fallback;

        /// <summary>
        /// * no-unknown
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strong", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusStrong? Strong { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusStrong.Fallback;

        /// <summary>
        /// * assign-type-mismatch
        /// <br/>* cast-local-type
        /// <br/>* cast-type-mismatch
        /// <br/>* inject-field
        /// <br/>* need-check-nil
        /// <br/>* param-type-mismatch
        /// <br/>* return-type-mismatch
        /// <br/>* undefined-field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusTypeCheck? TypeCheck { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusTypeCheck.Fallback;

        /// <summary>
        /// * missing-fields
        /// <br/>* missing-parameter
        /// <br/>* missing-return
        /// <br/>* missing-return-value
        /// <br/>* redundant-parameter
        /// <br/>* redundant-return-value
        /// <br/>* redundant-value
        /// <br/>* unbalanced-assignments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unbalanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusUnbalanced? Unbalanced { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusUnbalanced.Fallback;

        /// <summary>
        /// * code-after-break
        /// <br/>* empty-block
        /// <br/>* redundant-return
        /// <br/>* trailing-space
        /// <br/>* unreachable-code
        /// <br/>* unused-function
        /// <br/>* unused-label
        /// <br/>* unused-local
        /// <br/>* unused-vararg
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupFileStatusUnused? Unused { get; set; } = EmmyLua.Configuration.DiagnosticsGroupFileStatusUnused.Fallback;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DiagnosticsGroupSeverity
    {
        /// <summary>
        /// * ambiguity-1
        /// <br/>* count-down-loop
        /// <br/>* different-requires
        /// <br/>* newfield-call
        /// <br/>* newline-call
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ambiguity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityAmbiguity? Ambiguity { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityAmbiguity.Fallback;

        /// <summary>
        /// * await-in-sync
        /// <br/>* not-yieldable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("await", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityAwait? Await { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityAwait.Fallback;

        /// <summary>
        /// * codestyle-check
        /// <br/>* name-style-check
        /// <br/>* spell-check
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codestyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityCodestyle? Codestyle { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityCodestyle.Fallback;

        /// <summary>
        /// * global-element
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conventions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityConventions? Conventions { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityConventions.Fallback;

        /// <summary>
        /// * duplicate-index
        /// <br/>* duplicate-set-field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityDuplicate? Duplicate { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityDuplicate.Fallback;

        /// <summary>
        /// * global-in-nil-env
        /// <br/>* lowercase-global
        /// <br/>* undefined-env-child
        /// <br/>* undefined-global
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityGlobal? Global { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityGlobal.Fallback;

        /// <summary>
        /// * circle-doc-class
        /// <br/>* doc-field-no-class
        /// <br/>* duplicate-doc-alias
        /// <br/>* duplicate-doc-field
        /// <br/>* duplicate-doc-param
        /// <br/>* incomplete-signature-doc
        /// <br/>* missing-global-doc
        /// <br/>* missing-local-export-doc
        /// <br/>* undefined-doc-class
        /// <br/>* undefined-doc-name
        /// <br/>* undefined-doc-param
        /// <br/>* unknown-cast-variable
        /// <br/>* unknown-diag-code
        /// <br/>* unknown-operator
        /// </summary>
        [Newtonsoft.Json.JsonProperty("luadoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityLuadoc? Luadoc { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityLuadoc.Fallback;

        /// <summary>
        /// * redefined-local
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redefined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityRedefined? Redefined { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityRedefined.Fallback;

        /// <summary>
        /// * close-non-object
        /// <br/>* deprecated
        /// <br/>* discard-returns
        /// <br/>* invisible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityStrict? Strict { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityStrict.Fallback;

        /// <summary>
        /// * no-unknown
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strong", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityStrong? Strong { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityStrong.Fallback;

        /// <summary>
        /// * assign-type-mismatch
        /// <br/>* cast-local-type
        /// <br/>* cast-type-mismatch
        /// <br/>* inject-field
        /// <br/>* need-check-nil
        /// <br/>* param-type-mismatch
        /// <br/>* return-type-mismatch
        /// <br/>* undefined-field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityTypeCheck? TypeCheck { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityTypeCheck.Fallback;

        /// <summary>
        /// * missing-fields
        /// <br/>* missing-parameter
        /// <br/>* missing-return
        /// <br/>* missing-return-value
        /// <br/>* redundant-parameter
        /// <br/>* redundant-return-value
        /// <br/>* redundant-value
        /// <br/>* unbalanced-assignments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unbalanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityUnbalanced? Unbalanced { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityUnbalanced.Fallback;

        /// <summary>
        /// * code-after-break
        /// <br/>* empty-block
        /// <br/>* redundant-return
        /// <br/>* trailing-space
        /// <br/>* unreachable-code
        /// <br/>* unused-function
        /// <br/>* unused-label
        /// <br/>* unused-local
        /// <br/>* unused-vararg
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsGroupSeverityUnused? Unused { get; set; } = EmmyLua.Configuration.DiagnosticsGroupSeverityUnused.Fallback;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingDiagnosticsIgnoredFiles
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enable")]
        Enable = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingDiagnosticsLibraryFiles
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enable")]
        Enable = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DiagnosticsNeededFileStatus
    {
        /// <summary>
        /// Enable ambiguous operator precedence diagnostics. For example, the `num or 0 + 1` expression will be suggested `(num or 0) + 1` instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ambiguity-1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusAmbiguity1? Ambiguity1 { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusAmbiguity1.Any;

        /// <summary>
        /// Enable diagnostics for assignments in which the value's type does not match the type of the assigned variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assign-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusAssignTypeMismatch? AssignTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusAssignTypeMismatch.Opened;

        /// <summary>
        /// Enable diagnostics for calls of asynchronous functions within a synchronous function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("await-in-sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusAwaitInSync? AwaitInSync { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusAwaitInSync.None;

        /// <summary>
        /// Enable diagnostics for casts of local variables where the target type does not match the defined type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cast-local-type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCastLocalType? CastLocalType { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCastLocalType.Opened;

        /// <summary>
        /// Enable diagnostics for casts where the target type does not match the initial type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cast-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCastTypeMismatch? CastTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCastTypeMismatch.Opened;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("circle-doc-class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCircleDocClass? CircleDocClass { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCircleDocClass.Any;

        /// <summary>
        /// Enable diagnostics for attempts to close a variable with a non-object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("close-non-object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCloseNonObject? CloseNonObject { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCloseNonObject.Any;

        /// <summary>
        /// Enable diagnostics for code placed after a break statement in a loop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code-after-break", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCodeAfterBreak? CodeAfterBreak { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCodeAfterBreak.Opened;

        /// <summary>
        /// Enable diagnostics for incorrectly styled lines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codestyle-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCodestyleCheck? CodestyleCheck { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCodestyleCheck.None;

        /// <summary>
        /// Enable diagnostics for `for` loops which will never reach their max/limit because the loop is incrementing instead of decrementing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count-down-loop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusCountDownLoop? CountDownLoop { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusCountDownLoop.Any;

        /// <summary>
        /// Enable diagnostics to highlight deprecated API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDeprecated? Deprecated { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDeprecated.Any;

        /// <summary>
        /// Enable diagnostics for files which are required by two different paths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("different-requires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDifferentRequires? DifferentRequires { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDifferentRequires.Any;

        /// <summary>
        /// Enable diagnostics for calls of functions annotated with `---@nodiscard` where the return values are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discard-returns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDiscardReturns? DiscardReturns { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDiscardReturns.Any;

        /// <summary>
        /// Enable diagnostics to highlight a field annotation without a defining class annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doc-field-no-class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDocFieldNoClass? DocFieldNoClass { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDocFieldNoClass.Any;

        /// <summary>
        /// Enable diagnostics for a duplicated alias annotation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-doc-alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDuplicateDocAlias? DuplicateDocAlias { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDuplicateDocAlias.Any;

        /// <summary>
        /// Enable diagnostics for a duplicated field annotation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-doc-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDuplicateDocField? DuplicateDocField { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDuplicateDocField.Any;

        /// <summary>
        /// Enable diagnostics for a duplicated param annotation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-doc-param", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDuplicateDocParam? DuplicateDocParam { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDuplicateDocParam.Any;

        /// <summary>
        /// Enable duplicate table index diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDuplicateIndex? DuplicateIndex { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDuplicateIndex.Any;

        /// <summary>
        /// Enable diagnostics for setting the same field in a class more than once.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-set-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusDuplicateSetField? DuplicateSetField { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusDuplicateSetField.Opened;

        /// <summary>
        /// Enable empty code block diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("empty-block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusEmptyBlock? EmptyBlock { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusEmptyBlock.Opened;

        /// <summary>
        /// Enable diagnostics to warn about global elements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global-element", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusGlobalElement? GlobalElement { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusGlobalElement.None;

        /// <summary>
        /// Enable cannot use global variables （ `_ENV` is set to `nil`） diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global-in-nil-env", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusGlobalInNilEnv? GlobalInNilEnv { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusGlobalInNilEnv.Any;

        /// <summary>
        /// Incomplete @param or @return annotations for functions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomplete-signature-doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusIncompleteSignatureDoc? IncompleteSignatureDoc { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusIncompleteSignatureDoc.None;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inject-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusInjectField? InjectField { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusInjectField.Opened;

        /// <summary>
        /// Enable diagnostics for accesses to fields which are invisible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invisible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusInvisible? Invisible { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusInvisible.Any;

        /// <summary>
        /// Enable lowercase global variable definition diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lowercase-global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusLowercaseGlobal? LowercaseGlobal { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusLowercaseGlobal.Any;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusMissingFields? MissingFields { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusMissingFields.Any;

        /// <summary>
        /// Missing annotations for globals! Global functions must have a comment and annotations for all parameters and return values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-global-doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusMissingGlobalDoc? MissingGlobalDoc { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusMissingGlobalDoc.None;

        /// <summary>
        /// Missing annotations for exported locals! Exported local functions must have a comment and annotations for all parameters and return values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-local-export-doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusMissingLocalExportDoc? MissingLocalExportDoc { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusMissingLocalExportDoc.None;

        /// <summary>
        /// Enable diagnostics for function calls where the number of arguments is less than the number of annotated function parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusMissingParameter? MissingParameter { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusMissingParameter.Any;

        /// <summary>
        /// Enable diagnostics for functions with return annotations which have no return statement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusMissingReturn? MissingReturn { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusMissingReturn.Any;

        /// <summary>
        /// Enable diagnostics for return statements without values although the containing function declares returns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-return-value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusMissingReturnValue? MissingReturnValue { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusMissingReturnValue.Any;

        /// <summary>
        /// Enable diagnostics for name style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name-style-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusNameStyleCheck? NameStyleCheck { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusNameStyleCheck.None;

        /// <summary>
        /// Enable diagnostics for variable usages if `nil` or an optional (potentially `nil`) value was assigned to the variable before.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("need-check-nil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusNeedCheckNil? NeedCheckNil { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusNeedCheckNil.Opened;

        /// <summary>
        /// Enable newfield call diagnostics. It is raised when the parenthesis of a function call appear on the following line when defining a field in a table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newfield-call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusNewfieldCall? NewfieldCall { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusNewfieldCall.Any;

        /// <summary>
        /// Enable newline call diagnostics. Is's raised when a line starting with `(` is encountered, which is syntactically parsed as a function call on the previous line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newline-call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusNewlineCall? NewlineCall { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusNewlineCall.Any;

        /// <summary>
        /// Enable diagnostics for cases in which the type cannot be inferred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no-unknown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusNoUnknown? NoUnknown { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusNoUnknown.None;

        /// <summary>
        /// Enable diagnostics for calls to `coroutine.yield()` when it is not permitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("not-yieldable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusNotYieldable? NotYieldable { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusNotYieldable.None;

        /// <summary>
        /// Enable diagnostics for function calls where the type of a provided parameter does not match the type of the annotated function definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("param-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusParamTypeMismatch? ParamTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusParamTypeMismatch.Opened;

        /// <summary>
        /// Enable redefined local variable diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redefined-local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusRedefinedLocal? RedefinedLocal { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusRedefinedLocal.Opened;

        /// <summary>
        /// Enable redundant function parameter diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusRedundantParameter? RedundantParameter { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusRedundantParameter.Any;

        /// <summary>
        /// Enable diagnostics for return statements which are not needed because the function would exit on its own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusRedundantReturn? RedundantReturn { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusRedundantReturn.Opened;

        /// <summary>
        /// Enable diagnostics for return statements which return an extra value which is not specified by a return annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-return-value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusRedundantReturnValue? RedundantReturnValue { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusRedundantReturnValue.Any;

        /// <summary>
        /// Enable the redundant values assigned diagnostics. It's raised during assignment operation, when the number of values is higher than the number of objects being assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusRedundantValue? RedundantValue { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusRedundantValue.Any;

        /// <summary>
        /// Enable diagnostics for return values whose type does not match the type declared in the corresponding return annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusReturnTypeMismatch? ReturnTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusReturnTypeMismatch.Opened;

        /// <summary>
        /// Enable diagnostics for typos in strings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spell-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusSpellCheck? SpellCheck { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusSpellCheck.None;

        /// <summary>
        /// Enable trailing space diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trailing-space", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusTrailingSpace? TrailingSpace { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusTrailingSpace.Opened;

        /// <summary>
        /// Enable diagnostics on multiple assignments if not all variables obtain a value (e.g., `local x,y = 1`).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unbalanced-assignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnbalancedAssignments? UnbalancedAssignments { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnbalancedAssignments.Any;

        /// <summary>
        /// Enable diagnostics for class annotations in which an undefined class is referenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-doc-class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUndefinedDocClass? UndefinedDocClass { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUndefinedDocClass.Any;

        /// <summary>
        /// Enable diagnostics for type annotations referencing an undefined type or alias.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-doc-name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUndefinedDocName? UndefinedDocName { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUndefinedDocName.Any;

        /// <summary>
        /// Enable diagnostics for cases in which a parameter annotation is given without declaring the parameter in the function definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-doc-param", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUndefinedDocParam? UndefinedDocParam { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUndefinedDocParam.Any;

        /// <summary>
        /// Enable undefined environment variable diagnostics. It's raised when `_ENV` table is set to a new literal table, but the used global variable is no longer present in the global environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-env-child", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUndefinedEnvChild? UndefinedEnvChild { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUndefinedEnvChild.Any;

        /// <summary>
        /// Enable diagnostics for cases in which an undefined field of a variable is read.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUndefinedField? UndefinedField { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUndefinedField.Opened;

        /// <summary>
        /// Enable undefined global variable diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUndefinedGlobal? UndefinedGlobal { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUndefinedGlobal.Any;

        /// <summary>
        /// Enable diagnostics for casts of undefined variables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unknown-cast-variable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnknownCastVariable? UnknownCastVariable { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnknownCastVariable.Any;

        /// <summary>
        /// Enable diagnostics in cases in which an unknown diagnostics code is entered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unknown-diag-code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnknownDiagCode? UnknownDiagCode { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnknownDiagCode.Any;

        /// <summary>
        /// Enable diagnostics for unknown operators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unknown-operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnknownOperator? UnknownOperator { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnknownOperator.Any;

        /// <summary>
        /// Enable diagnostics for unreachable code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unreachable-code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnreachableCode? UnreachableCode { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnreachableCode.Opened;

        /// <summary>
        /// Enable unused function diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnusedFunction? UnusedFunction { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnusedFunction.Opened;

        /// <summary>
        /// Enable unused label diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnusedLabel? UnusedLabel { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnusedLabel.Opened;

        /// <summary>
        /// Enable unused local variable diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnusedLocal? UnusedLocal { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnusedLocal.Opened;

        /// <summary>
        /// Enable unused vararg diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-vararg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsNeededFileStatusUnusedVararg? UnusedVararg { get; set; } = EmmyLua.Configuration.DiagnosticsNeededFileStatusUnusedVararg.Opened;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DiagnosticsSeverity
    {
        /// <summary>
        /// Enable ambiguous operator precedence diagnostics. For example, the `num or 0 + 1` expression will be suggested `(num or 0) + 1` instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ambiguity-1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityAmbiguity1? Ambiguity1 { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityAmbiguity1.Warning;

        /// <summary>
        /// Enable diagnostics for assignments in which the value's type does not match the type of the assigned variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assign-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityAssignTypeMismatch? AssignTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityAssignTypeMismatch.Warning;

        /// <summary>
        /// Enable diagnostics for calls of asynchronous functions within a synchronous function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("await-in-sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityAwaitInSync? AwaitInSync { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityAwaitInSync.Warning;

        /// <summary>
        /// Enable diagnostics for casts of local variables where the target type does not match the defined type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cast-local-type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCastLocalType? CastLocalType { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCastLocalType.Warning;

        /// <summary>
        /// Enable diagnostics for casts where the target type does not match the initial type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cast-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCastTypeMismatch? CastTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCastTypeMismatch.Warning;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("circle-doc-class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCircleDocClass? CircleDocClass { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCircleDocClass.Warning;

        /// <summary>
        /// Enable diagnostics for attempts to close a variable with a non-object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("close-non-object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCloseNonObject? CloseNonObject { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCloseNonObject.Warning;

        /// <summary>
        /// Enable diagnostics for code placed after a break statement in a loop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code-after-break", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCodeAfterBreak? CodeAfterBreak { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCodeAfterBreak.Hint;

        /// <summary>
        /// Enable diagnostics for incorrectly styled lines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codestyle-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCodestyleCheck? CodestyleCheck { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCodestyleCheck.Warning;

        /// <summary>
        /// Enable diagnostics for `for` loops which will never reach their max/limit because the loop is incrementing instead of decrementing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count-down-loop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityCountDownLoop? CountDownLoop { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityCountDownLoop.Warning;

        /// <summary>
        /// Enable diagnostics to highlight deprecated API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDeprecated? Deprecated { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDeprecated.Warning;

        /// <summary>
        /// Enable diagnostics for files which are required by two different paths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("different-requires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDifferentRequires? DifferentRequires { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDifferentRequires.Warning;

        /// <summary>
        /// Enable diagnostics for calls of functions annotated with `---@nodiscard` where the return values are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discard-returns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDiscardReturns? DiscardReturns { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDiscardReturns.Warning;

        /// <summary>
        /// Enable diagnostics to highlight a field annotation without a defining class annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doc-field-no-class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDocFieldNoClass? DocFieldNoClass { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDocFieldNoClass.Warning;

        /// <summary>
        /// Enable diagnostics for a duplicated alias annotation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-doc-alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDuplicateDocAlias? DuplicateDocAlias { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDuplicateDocAlias.Warning;

        /// <summary>
        /// Enable diagnostics for a duplicated field annotation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-doc-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDuplicateDocField? DuplicateDocField { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDuplicateDocField.Warning;

        /// <summary>
        /// Enable diagnostics for a duplicated param annotation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-doc-param", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDuplicateDocParam? DuplicateDocParam { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDuplicateDocParam.Warning;

        /// <summary>
        /// Enable duplicate table index diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDuplicateIndex? DuplicateIndex { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDuplicateIndex.Warning;

        /// <summary>
        /// Enable diagnostics for setting the same field in a class more than once.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate-set-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityDuplicateSetField? DuplicateSetField { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityDuplicateSetField.Warning;

        /// <summary>
        /// Enable empty code block diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("empty-block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityEmptyBlock? EmptyBlock { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityEmptyBlock.Hint;

        /// <summary>
        /// Enable diagnostics to warn about global elements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global-element", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityGlobalElement? GlobalElement { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityGlobalElement.Warning;

        /// <summary>
        /// Enable cannot use global variables （ `_ENV` is set to `nil`） diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global-in-nil-env", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityGlobalInNilEnv? GlobalInNilEnv { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityGlobalInNilEnv.Warning;

        /// <summary>
        /// Incomplete @param or @return annotations for functions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomplete-signature-doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityIncompleteSignatureDoc? IncompleteSignatureDoc { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityIncompleteSignatureDoc.Warning;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inject-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityInjectField? InjectField { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityInjectField.Warning;

        /// <summary>
        /// Enable diagnostics for accesses to fields which are invisible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invisible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityInvisible? Invisible { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityInvisible.Warning;

        /// <summary>
        /// Enable lowercase global variable definition diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lowercase-global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityLowercaseGlobal? LowercaseGlobal { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityLowercaseGlobal.Information;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityMissingFields? MissingFields { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityMissingFields.Warning;

        /// <summary>
        /// Missing annotations for globals! Global functions must have a comment and annotations for all parameters and return values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-global-doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityMissingGlobalDoc? MissingGlobalDoc { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityMissingGlobalDoc.Warning;

        /// <summary>
        /// Missing annotations for exported locals! Exported local functions must have a comment and annotations for all parameters and return values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-local-export-doc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityMissingLocalExportDoc? MissingLocalExportDoc { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityMissingLocalExportDoc.Warning;

        /// <summary>
        /// Enable diagnostics for function calls where the number of arguments is less than the number of annotated function parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityMissingParameter? MissingParameter { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityMissingParameter.Warning;

        /// <summary>
        /// Enable diagnostics for functions with return annotations which have no return statement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityMissingReturn? MissingReturn { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityMissingReturn.Warning;

        /// <summary>
        /// Enable diagnostics for return statements without values although the containing function declares returns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missing-return-value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityMissingReturnValue? MissingReturnValue { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityMissingReturnValue.Warning;

        /// <summary>
        /// Enable diagnostics for name style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name-style-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityNameStyleCheck? NameStyleCheck { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityNameStyleCheck.Warning;

        /// <summary>
        /// Enable diagnostics for variable usages if `nil` or an optional (potentially `nil`) value was assigned to the variable before.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("need-check-nil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityNeedCheckNil? NeedCheckNil { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityNeedCheckNil.Warning;

        /// <summary>
        /// Enable newfield call diagnostics. It is raised when the parenthesis of a function call appear on the following line when defining a field in a table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newfield-call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityNewfieldCall? NewfieldCall { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityNewfieldCall.Warning;

        /// <summary>
        /// Enable newline call diagnostics. Is's raised when a line starting with `(` is encountered, which is syntactically parsed as a function call on the previous line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newline-call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityNewlineCall? NewlineCall { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityNewlineCall.Warning;

        /// <summary>
        /// Enable diagnostics for cases in which the type cannot be inferred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no-unknown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityNoUnknown? NoUnknown { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityNoUnknown.Warning;

        /// <summary>
        /// Enable diagnostics for calls to `coroutine.yield()` when it is not permitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("not-yieldable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityNotYieldable? NotYieldable { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityNotYieldable.Warning;

        /// <summary>
        /// Enable diagnostics for function calls where the type of a provided parameter does not match the type of the annotated function definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("param-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityParamTypeMismatch? ParamTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityParamTypeMismatch.Warning;

        /// <summary>
        /// Enable redefined local variable diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redefined-local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityRedefinedLocal? RedefinedLocal { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityRedefinedLocal.Hint;

        /// <summary>
        /// Enable redundant function parameter diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityRedundantParameter? RedundantParameter { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityRedundantParameter.Warning;

        /// <summary>
        /// Enable diagnostics for return statements which are not needed because the function would exit on its own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityRedundantReturn? RedundantReturn { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityRedundantReturn.Hint;

        /// <summary>
        /// Enable diagnostics for return statements which return an extra value which is not specified by a return annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-return-value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityRedundantReturnValue? RedundantReturnValue { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityRedundantReturnValue.Warning;

        /// <summary>
        /// Enable the redundant values assigned diagnostics. It's raised during assignment operation, when the number of values is higher than the number of objects being assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redundant-value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityRedundantValue? RedundantValue { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityRedundantValue.Warning;

        /// <summary>
        /// Enable diagnostics for return values whose type does not match the type declared in the corresponding return annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return-type-mismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityReturnTypeMismatch? ReturnTypeMismatch { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityReturnTypeMismatch.Warning;

        /// <summary>
        /// Enable diagnostics for typos in strings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spell-check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeveritySpellCheck? SpellCheck { get; set; } = EmmyLua.Configuration.DiagnosticsSeveritySpellCheck.Information;

        /// <summary>
        /// Enable trailing space diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trailing-space", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityTrailingSpace? TrailingSpace { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityTrailingSpace.Hint;

        /// <summary>
        /// Enable diagnostics on multiple assignments if not all variables obtain a value (e.g., `local x,y = 1`).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unbalanced-assignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnbalancedAssignments? UnbalancedAssignments { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnbalancedAssignments.Warning;

        /// <summary>
        /// Enable diagnostics for class annotations in which an undefined class is referenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-doc-class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUndefinedDocClass? UndefinedDocClass { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUndefinedDocClass.Warning;

        /// <summary>
        /// Enable diagnostics for type annotations referencing an undefined type or alias.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-doc-name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUndefinedDocName? UndefinedDocName { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUndefinedDocName.Warning;

        /// <summary>
        /// Enable diagnostics for cases in which a parameter annotation is given without declaring the parameter in the function definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-doc-param", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUndefinedDocParam? UndefinedDocParam { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUndefinedDocParam.Warning;

        /// <summary>
        /// Enable undefined environment variable diagnostics. It's raised when `_ENV` table is set to a new literal table, but the used global variable is no longer present in the global environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-env-child", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUndefinedEnvChild? UndefinedEnvChild { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUndefinedEnvChild.Information;

        /// <summary>
        /// Enable diagnostics for cases in which an undefined field of a variable is read.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUndefinedField? UndefinedField { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUndefinedField.Warning;

        /// <summary>
        /// Enable undefined global variable diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undefined-global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUndefinedGlobal? UndefinedGlobal { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUndefinedGlobal.Warning;

        /// <summary>
        /// Enable diagnostics for casts of undefined variables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unknown-cast-variable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnknownCastVariable? UnknownCastVariable { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnknownCastVariable.Warning;

        /// <summary>
        /// Enable diagnostics in cases in which an unknown diagnostics code is entered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unknown-diag-code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnknownDiagCode? UnknownDiagCode { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnknownDiagCode.Warning;

        /// <summary>
        /// Enable diagnostics for unknown operators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unknown-operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnknownOperator? UnknownOperator { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnknownOperator.Warning;

        /// <summary>
        /// Enable diagnostics for unreachable code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unreachable-code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnreachableCode? UnreachableCode { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnreachableCode.Hint;

        /// <summary>
        /// Enable unused function diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnusedFunction? UnusedFunction { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnusedFunction.Hint;

        /// <summary>
        /// Enable unused label diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnusedLabel? UnusedLabel { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnusedLabel.Hint;

        /// <summary>
        /// Enable unused local variable diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnusedLocal? UnusedLocal { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnusedLocal.Hint;

        /// <summary>
        /// Enable unused vararg diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unused-vararg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagnosticsSeverityUnusedVararg? UnusedVararg { get; set; } = EmmyLua.Configuration.DiagnosticsSeverityUnusedVararg.Hint;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingDiagnosticsWorkspaceEvent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnChange")]
        OnChange = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"OnSave")]
        OnSave = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Doc
    {
        [Newtonsoft.Json.JsonProperty("packageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageName PackageName { get; set; }

        [Newtonsoft.Json.JsonProperty("privateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateName PrivateName { get; set; }

        [Newtonsoft.Json.JsonProperty("protectedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProtectedName ProtectedName { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Format
    {
        [Newtonsoft.Json.JsonProperty("defaultConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefaultConfig DefaultConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Hint
    {
        [Newtonsoft.Json.JsonProperty("arrayIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingHintArrayIndex? ArrayIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("await", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Await { get; set; }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        [Newtonsoft.Json.JsonProperty("paramName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingHintParamName? ParamName { get; set; }

        [Newtonsoft.Json.JsonProperty("paramType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParamType { get; set; }

        [Newtonsoft.Json.JsonProperty("semicolon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingHintSemicolon? Semicolon { get; set; }

        [Newtonsoft.Json.JsonProperty("setType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetType { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingHintArrayIndex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enable")]
        Enable = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingHintParamName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Literal")]
        Literal = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingHintSemicolon
    {

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SameLine")]
        SameLine = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Hover
    {
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        [Newtonsoft.Json.JsonProperty("enumsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnumsLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("expandAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpandAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("previewFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreviewFields { get; set; }

        [Newtonsoft.Json.JsonProperty("viewNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ViewNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("viewString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ViewString { get; set; }

        [Newtonsoft.Json.JsonProperty("viewStringMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ViewStringMax { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Misc
    {
        [Newtonsoft.Json.JsonProperty("executablePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutablePath { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parameters Parameters { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NameStyle
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config Config { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Runtime
    {
        [Newtonsoft.Json.JsonProperty("builtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RuntimeBuiltin Builtin { get; set; }

        [Newtonsoft.Json.JsonProperty("fileEncoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingRuntimeFileEncoding? FileEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Meta { get; set; }

        [Newtonsoft.Json.JsonProperty("nonstandardSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NonstandardSymbol2 NonstandardSymbol { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Path Path { get; set; }

        [Newtonsoft.Json.JsonProperty("pathStrict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PathStrict { get; set; }

        [Newtonsoft.Json.JsonProperty("plugin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Plugin { get; set; }

        [Newtonsoft.Json.JsonProperty("pluginArgs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PluginArgs PluginArgs { get; set; }

        [Newtonsoft.Json.JsonProperty("special", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Special Special { get; set; }

        [Newtonsoft.Json.JsonProperty("unicodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnicodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingRuntimeVersion? Version { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RuntimeBuiltin
    {
        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinBasic? Basic { get; set; } = EmmyLua.Configuration.RuntimeBuiltinBasic.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinBit? Bit { get; set; } = EmmyLua.Configuration.RuntimeBuiltinBit.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bit32", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinBit32? Bit32 { get; set; } = EmmyLua.Configuration.RuntimeBuiltinBit32.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("builtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinBuiltin? Builtin { get; set; } = EmmyLua.Configuration.RuntimeBuiltinBuiltin.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coroutine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinCoroutine? Coroutine { get; set; } = EmmyLua.Configuration.RuntimeBuiltinCoroutine.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinDebug? Debug { get; set; } = EmmyLua.Configuration.RuntimeBuiltinDebug.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ffi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinFfi? Ffi { get; set; } = EmmyLua.Configuration.RuntimeBuiltinFfi.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("io", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinIo? Io { get; set; } = EmmyLua.Configuration.RuntimeBuiltinIo.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinJit? Jit { get; set; } = EmmyLua.Configuration.RuntimeBuiltinJit.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jit.profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinJitProfile? JitProfile { get; set; } = EmmyLua.Configuration.RuntimeBuiltinJitProfile.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jit.util", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinJitUtil? JitUtil { get; set; } = EmmyLua.Configuration.RuntimeBuiltinJitUtil.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("math", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinMath? Math { get; set; } = EmmyLua.Configuration.RuntimeBuiltinMath.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("os", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinOs? Os { get; set; } = EmmyLua.Configuration.RuntimeBuiltinOs.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("package", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinPackage? Package { get; set; } = EmmyLua.Configuration.RuntimeBuiltinPackage.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("string", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinString? String { get; set; } = EmmyLua.Configuration.RuntimeBuiltinString.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("string.buffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinStringBuffer? StringBuffer { get; set; } = EmmyLua.Configuration.RuntimeBuiltinStringBuffer.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("table", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinTable? Table { get; set; } = EmmyLua.Configuration.RuntimeBuiltinTable.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("table.clear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinTableClear? TableClear { get; set; } = EmmyLua.Configuration.RuntimeBuiltinTableClear.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("table.new", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinTableNew? TableNew { get; set; } = EmmyLua.Configuration.RuntimeBuiltinTableNew.Default;

        /// <summary>
        /// TODO: Needs documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("utf8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuntimeBuiltinUtf8? Utf8 { get; set; } = EmmyLua.Configuration.RuntimeBuiltinUtf8.Default;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingRuntimeFileEncoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"utf8")]
        Utf8 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"ansi")]
        Ansi = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"utf16le")]
        Utf16le = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"utf16be")]
        Utf16be = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NonstandardSymbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"//")]
        Comment = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"/**/")]
        Long_comment = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"`")]
        Backtick = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"+=")]
        Plus_equals = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"-=")]
        Minus_equals = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"*=")]
        Multiply_equals = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"/=")]
        Divide_equals = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"%=")]
        Modulus_equals = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"^=")]
        Bitwise_xor_equals = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"//=")]
        Floor_divide_equals = 9,


        [System.Runtime.Serialization.EnumMember(Value = @"|=")]
        Bitwise_or_equals = 10,


        [System.Runtime.Serialization.EnumMember(Value = @"&=")]
        Bitwise_and_equals = 11,


        [System.Runtime.Serialization.EnumMember(Value = @"<<=")]
        Left_shift_equals = 12,


        [System.Runtime.Serialization.EnumMember(Value = @">>=")]
        Right_shift_equals = 13,


        [System.Runtime.Serialization.EnumMember(Value = @"||")]
        Logical_or = 14,


        [System.Runtime.Serialization.EnumMember(Value = @"&&")]
        Logical_and = 15,


        [System.Runtime.Serialization.EnumMember(Value = @"!")]
        Logical_not = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"!=")]
        Not_equals = 17,


        [System.Runtime.Serialization.EnumMember(Value = @"continue")]
        Continue_keyword = 18,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"_G")]
        _G = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"rawset")]
        Rawset = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"rawget")]
        Rawget = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"setmetatable")]
        Setmetatable = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"require")]
        Require = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"dofile")]
        Dofile = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"loadfile")]
        Loadfile = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"pcall")]
        Pcall = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"xpcall")]
        Xpcall = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"assert")]
        Assert = 9,


        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 10,


        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 11,


        [System.Runtime.Serialization.EnumMember(Value = @"os.exit")]
        Os_exit = 12,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SettingRuntimeVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Lua 5.1")]
        Lua_5_1 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Lua 5.2")]
        Lua_5_2 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Lua 5.3")]
        Lua_5_3 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Lua 5.4")]
        Lua_5_4 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"LuaJIT")]
        LuaJIT = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Semantic
    {
        [Newtonsoft.Json.JsonProperty("annotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Annotation { get; set; }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Keyword { get; set; }

        [Newtonsoft.Json.JsonProperty("variable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Variable { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SignatureHelp
    {
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Spell
    {
        [Newtonsoft.Json.JsonProperty("dict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dict Dict { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Type
    {
        [Newtonsoft.Json.JsonProperty("castNumberToInteger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CastNumberToInteger { get; set; }

        [Newtonsoft.Json.JsonProperty("weakNilCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WeakNilCheck { get; set; }

        [Newtonsoft.Json.JsonProperty("weakUnionCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WeakUnionCheck { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TypeFormat
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFormatConfig Config { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TypeFormatConfig
    {
        /// <summary>
        /// Controls if `end` is automatically completed at suitable positions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_complete_end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Auto_complete_end { get; set; } = "true";

        /// <summary>
        /// Controls if a separator is automatically appended at the end of a table declaration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_complete_table_sep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Auto_complete_table_sep { get; set; } = "true";

        /// <summary>
        /// Controls if a line is formatted at all.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format_line", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format_line { get; set; } = "true";


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Window
    {
        [Newtonsoft.Json.JsonProperty("progressBar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProgressBar { get; set; }

        [Newtonsoft.Json.JsonProperty("statusBar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StatusBar { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Workspace
    {
        [Newtonsoft.Json.JsonProperty("checkThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckThirdParty { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreDir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IgnoreDir IgnoreDir { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreSubmodules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreSubmodules { get; set; }

        [Newtonsoft.Json.JsonProperty("library", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Library Library { get; set; }

        [Newtonsoft.Json.JsonProperty("maxPreload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxPreload { get; set; }

        [Newtonsoft.Json.JsonProperty("preloadFileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreloadFileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("useGitIgnore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseGitIgnore { get; set; }

        [Newtonsoft.Json.JsonProperty("userThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserThirdParty UserThirdParty { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Disable2 : System.Collections.ObjectModel.Collection<Disable>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisableScheme : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Globals : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UnusedLocalExclude : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusAmbiguity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusAwait
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusCodestyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusConventions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusDuplicate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusGlobal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusLuadoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusRedefined
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusStrict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusStrong
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusTypeCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusUnbalanced
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupFileStatusUnused
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityAmbiguity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityAwait
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityCodestyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityConventions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityDuplicate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityGlobal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityLuadoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityRedefined
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityStrict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityStrong
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityTypeCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityUnbalanced
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsGroupSeverityUnused
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Fallback")]
        Fallback = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusAmbiguity1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusAssignTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusAwaitInSync
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCastLocalType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCastTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCircleDocClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCloseNonObject
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCodeAfterBreak
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCodestyleCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusCountDownLoop
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDeprecated
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDifferentRequires
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDiscardReturns
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDocFieldNoClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDuplicateDocAlias
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDuplicateDocField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDuplicateDocParam
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDuplicateIndex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusDuplicateSetField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusEmptyBlock
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusGlobalElement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusGlobalInNilEnv
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusIncompleteSignatureDoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusInjectField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusInvisible
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusLowercaseGlobal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusMissingFields
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusMissingGlobalDoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusMissingLocalExportDoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusMissingParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusMissingReturn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusMissingReturnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusNameStyleCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusNeedCheckNil
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusNewfieldCall
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusNewlineCall
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusNoUnknown
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusNotYieldable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusParamTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusRedefinedLocal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusRedundantParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusRedundantReturn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusRedundantReturnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusRedundantValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusReturnTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusSpellCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusTrailingSpace
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnbalancedAssignments
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUndefinedDocClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUndefinedDocName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUndefinedDocParam
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUndefinedEnvChild
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUndefinedField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUndefinedGlobal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnknownCastVariable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnknownDiagCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnknownOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnreachableCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnusedFunction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnusedLabel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnusedLocal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsNeededFileStatusUnusedVararg
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Any!")]
        Any_ = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Opened!")]
        Opened_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"None!")]
        None_ = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityAmbiguity1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityAssignTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityAwaitInSync
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCastLocalType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCastTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCircleDocClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCloseNonObject
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCodeAfterBreak
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCodestyleCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityCountDownLoop
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDeprecated
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDifferentRequires
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDiscardReturns
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDocFieldNoClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDuplicateDocAlias
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDuplicateDocField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDuplicateDocParam
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDuplicateIndex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityDuplicateSetField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityEmptyBlock
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityGlobalElement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityGlobalInNilEnv
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityIncompleteSignatureDoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityInjectField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityInvisible
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityLowercaseGlobal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityMissingFields
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityMissingGlobalDoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityMissingLocalExportDoc
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityMissingParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityMissingReturn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityMissingReturnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityNameStyleCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityNeedCheckNil
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityNewfieldCall
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityNewlineCall
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityNoUnknown
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityNotYieldable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityParamTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityRedefinedLocal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityRedundantParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityRedundantReturn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityRedundantReturnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityRedundantValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityReturnTypeMismatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeveritySpellCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityTrailingSpace
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnbalancedAssignments
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUndefinedDocClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUndefinedDocName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUndefinedDocParam
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUndefinedEnvChild
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUndefinedField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUndefinedGlobal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnknownCastVariable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnknownDiagCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnknownOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnreachableCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnusedFunction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnusedLabel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnusedLocal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DiagnosticsSeverityUnusedVararg
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint")]
        Hint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Error!")]
        Error_ = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Warning!")]
        Warning_ = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Information!")]
        Information_ = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Hint!")]
        Hint_ = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackageName : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PrivateName : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProtectedName : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DefaultConfig : System.Collections.Generic.Dictionary<string, string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Parameters : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Config : System.Collections.Generic.Dictionary<string, string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NonstandardSymbol2 : System.Collections.ObjectModel.Collection<NonstandardSymbol>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Path : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PluginArgs : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Special : System.Collections.Generic.Dictionary<string, Anonymous?>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinBasic
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinBit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinBit32
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinBuiltin
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinCoroutine
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinDebug
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinFfi
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinIo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinJit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinJitProfile
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinJitUtil
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinMath
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinOs
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinPackage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinString
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinStringBuffer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinTable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinTableClear
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinTableNew
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RuntimeBuiltinUtf8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"enable")]
        Enable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"disable")]
        Disable = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Dict : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IgnoreDir : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Library : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UserThirdParty : System.Collections.ObjectModel.Collection<string>
    {

    }
}